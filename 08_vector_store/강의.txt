기술 자체보다는 기술을 어떻게 활용할 수 있느냐

유행하는 2-3개월 사이에 어떻게 빨리 찍어낼 수 있느냐가 중요

실행할 때는 GPT를 쓸 수 있지만 설계에서는 GPT를 쓸 수 없다(직접 만들어야)

GPT 이후 신입 잘 안 뽑고 적은 인원 + ai가 대세<< 어떻게 해야 하는가?

불경기기도 하지만 구직 자체가 굉장히 적음<<< 활성공고 수도 적음. 

사람 뽑기보다는 AI 활용 선호하는 기업들

좋은 프로젝트가 중요한 이유: 생각이 한 발 더 깊이 나갔느냐(기능을 구현하는 것보다도 사용자에게 어떤 경험을 줄 수 있느냐?)

서울시장상 받은 시외버스표 목소리로 얘매앱 -> 왜 중요한가? 누구에게 팔리는가?

노인들, 기술에 취약한 사람들 => 

어떻게 했냐보다 왜 했냐? 고민의 깊이가 깊었냐가 중요

기술을 써서 뭘 했냐를 보여줘야 함

궁극적으로는 플랫폼 형태의 앱

취업할 때까지 계속 프로젝트 돌려야 함 + 인성교육 중요(팀으로서 잘 하는 게 중요함)

웹을 하든 LLM을 하든 -> 어떤 아이디어로 했냐가 중요함. 시스템에서 혼자 하는 게 아니기 때문에 기술에 대한 선택의 문제지 프론트만 한다/백엔드만 한다/뭐만 한다는 관념을 버려야 함

트렌드가 바뀐 지 꽤 됨(결국 ai를 쓰기 때문에)

처음엔 spring은 잘 안 씀(크기 때문에 처음엔 파이썬으로 찍어내고 각을 봄) -> 스프링으로 세팅하는 동안 2-3달이 걸리는데 그 동안에 유행 끝남

AI도 한때 대세였지만 GPT보다 좋아?에 다 깨져버림

생각을 열어놓고 빨리 받아들일 수 있어야 함

AI한테 질문을 잘할 수 있어야 함

기능을 정의하고 서비스를 만드는 건 중요 -> 사용자한테까지 이어줄 수 있어야 한다

비전공자의 장점 **자기 분야랑 연계해서 쓸 수 있다는 점**

이건 어떨까요 저건 어떨까요 하지 말고 고민해서 뭔갈 만들어와야 결과물의 질이 올라감

노션은 사실 데이터베이스 역할이지 프레젠테이션 도구가 아님. 구글docs와 ppt를 쓸 것

우리 팀은 훌륭하고 뭐뭐를 하고 있냐<< 이게 뭐가 중요? 주제를 정할 때 너무 허무맹랑하고 공격적으로 쓰지 말 것

호불호 안 갈리고 현실성 있는 시장 안에서 주제를 찾자

시장=여러분들이 풀 문제지 타겟

웨딩->ok

여행은 서비스로 끌어올려야 함.

향 추천은 좋다-> 인공지능 시장에서 오히려 더 전통적인 게 어필할 수 있음

유명 바리스타의 커피를 마시는 데 키오스크가 필요한가?

음악추천은 식상

기능을 먼저 구현해놓고 합리화하다 보면 외부인에게 보이는 시각은 안좋아짐. 먼저 근거부터 마련해놓을 것

돈을 벌기 위한 활동이기 때문에 구체적으로 문제를 해결해봤냐가 중요함

실제 사용자가 얼마나 있느냐? 이미 현실세계에 사용자가 있고 어느정도 예상되는 트래픽을 제공할 수 있어야 함

문화재의 경우에는 문화재 소개 어플만으론 안 되겠지만 지자체와 연관하면서 지자체나 여행가는 학부모들이 수요로 잡을 수 있어짐

미래는 이러러 것이라는 예상/쫓아갈 필요가 없다

유튜브도 보고 책도 읽으면서 인사이트를 잘 만들어놓는 것이 중요함

취업은 절대 계획대로 되지 않는다 -> 6개월 뒤에 취업한다는 계획도 허무맹랑할 수 있다

자꾸 기능을 이것저것 많이 추가하려 하지 말 것

면접 때 제일 많이 보여주는 것-> 이 기능을 왜 만들었느냐? 이걸 답할 수 있어야 함

이 기능을 왜 붙였느냐는 질문이 나오는 이유는 그 기능을 붙인 게 망해서

구현 100%는 불가능하니 어느정도 생각을 축소시켜야 하는 필요성이 있음

어떤 부트캠프를 보진 않는다 -> 어떤 포트폴리오 어떤 기능을 만들었냐?

브랜드 있는 부트캠프 들어가려고 하지 말 것

가볍게 생각하지 말자 

네카라쿠배<< 여기는 전공 잘 맞추고 대학도 좋은 데 들어간 사람들이 가는 곳

너무 눈을 높일 필요는 없다-> 중소기업을 가더라도 대기업으로 갈 기회가 충분히 있다.

**아이디어 공방**

AI 일러스트를 자기가 그린 일러스트라고 속이는 거 때문에 민감한 사람들도 많은데 AI 일러스트를 최대한 많이 수집해서 AI만 있는 특징 같은 걸 잡아내서 탐지하는 프로그램이나 SNS에서 사람인 척하는 AI 계정들 관련해서 문제가 생기니 판별해주는 계정을 만들 수도 있고(reddit 등지에서 이미 있는 포스트를 복붙해서 올리는 걸 감지하는 봇 같은 게 있음) 



사학과에서 조선왕조실록 같은 사서들이 데이터베이스가 되어있지만 특정 단어, 당대에 쓰던 몇몇 용어들을 쓰지 않으면 검색에 안 걸리기 때문에 여러 번 검색해야 하는 불편함이 있음

<< 비슷한 단어를 검색하면 관련 단어들을 포함하는 기록들이 한꺼번에 걸려서 이용하기 쉽게 만들어주는 건 어떨까? 

꼭 역사 관련할 필요는 없고 판례처럼 데이터베이스가 이미 존재하는 데 응용할 수 있을 거 같음

---


모델 트레이닝은 더 이상 매력적이지 않고 엔지니어들이 필요해짐

논문만 엄청나게 많이 올라오는데 언제 다 읽을 거냐? -> 미국에선 새벽에 논문이 나옴

AI 엔지니어라는 새로운 직군이 나타나게 됨

전통적인 지식 없이도 사람들은 여전히 ai 어플을 만들어서 시판함

구조를 꼭 알 필요가 없음

"가까운 미래에는 아무도 Attention is All You Need를 읽고 AI 엔지니어링을 시작하라고 권하지 않을 것입니다 . Ford Model T의 회로도를 읽고 운전을 시작하지 않는 것과 마찬가지입니다. 
물론 기본과 역사를 이해하는 것은 항상 도움이 되며 아직 일반적으로 인식되지 않은 아이디어와 효율성/역량 향상을 찾는 데 도움이 됩니다. 
하지만 때로는 제품을 사용 하고 경험을 통해 품질을 배울 수도 있습니다."

https://www.latent.space/p/ai-engineer

똑똑한 연구자와 엄청나게 많은 GPU를 가지는 방법은 글로벌 몇몇 기업밖에 없음. 우리는 애초에 그렇게 많은 GPU도 전세계 오천명 안에 들 수도 없는데 꼭 학사를 따는 것이 의미가 있겠느냐

GPU 사용료만 16억 <<

한 번 모델을 만들었는데 사용자가 만족하지 못하면 그대로 망함

생성형 모델을 AI가 다 만들어주니 아이디어가 가장 중요함

기능은 다 있다, 그걸 어떻게 활용할 것인가?

LLM은 헛소리도 잘하기 때문에 문맥을 주고 추론엔진을 쓰는 것이 좋다는 관점이 있음

AI가 붙지 않은 서비스를 개발하는 회사는 없다 

Vflat 사례 - > 책의 휘어짐을 인식하고 문제점으로 발전시킴

허깅페이스에서 다양한 어플리케이션을 해 봐야 느는 것

LLM으로 풀지 못하겠는 게 있으면 LLM을 많이 써볼것

task랑 주고받은 인터페이스에 대해서만 생각해볼것

* 성민님 특강페이지 볼 것

* - https://eopla.net/magazines/22808#
- https://www.latent.space/p/ai-engineer
- https://paperswithcode.com/sota
- 기능구현보단 서비스 제공의 측면에서 생각해보기
→ 당장 창업을 할 수 있겠단 마음가짐
- 해커톤 수상작들 살펴보기
- 허깅페이스
→ Tasks 많이보고 뭐있는지 알수록 좋다
→ 좋은 라이브러리는 설명이 잘 되어있다! (Docs 참고)
- Survey 논문
→ 산업에 어떤 Task들이 쓰이고있는지 정리한 논문
- LLM이 어디까지 처리할수있을지
→ 사례, 실제 모델들 많이 알아보기
→ 프롬프트 많이 작성해봐야함
- Inference와 Train
- 오닉스 런타임
- sam2 프레임워크
- 유저 중심의 서비스 우선 생각


tsak 보는 팁
좋은 라이브러리 들어가는 방법 설명 적혀 있음
huggingface docs
task guide